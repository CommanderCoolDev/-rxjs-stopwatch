{"version":3,"sources":["style.js","App.jsx","index.js"],"names":["useStyles","makeStyles","theme","container","backgroundColor","palette","background","paper","padding","spacing","listStyleType","cardGrid","card","height","display","justifyContent","alignItems","flexDirection","cardContent","flexGrow","App","useState","sec","setSec","status","setStatus","isOn","setIsOn","classes","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","start","useCallback","stop","reset","wait","console","log","Date","Container","className","maxWidth","Grid","justify","item","xs","sm","md","lg","Card","CardContent","Typography","variant","toISOString","slice","CardActions","ButtonGroup","align","color","Button","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAuBeA,EArBGC,aAAW,SAAAC,GAAK,MAAK,CACrCC,UAAW,CACTC,gBAAiBF,EAAMG,QAAQC,WAAWC,MAC1CC,QAASN,EAAMO,QAAQ,EAAG,EAAG,GAC7BC,cAAe,QAEjBC,SAAU,CACRH,QAAS,UAEXI,KAAM,CACJC,OAAQ,OACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,UAEjBC,YAAa,CACXC,SAAU,O,OCHC,SAASC,IACtB,MAAsBC,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA4BF,mBAAS,QAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAwBJ,oBAAS,GAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACMC,EAAU5B,IAEhB6B,qBAAU,WACR,IAAMC,EAAe,IAAIC,IAQzB,OAPAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACM,QAAXX,GACFD,GAAO,SAAAa,GAAG,OAAIA,EAAM,UAGnB,WACLN,EAAaO,OACbP,EAAaQ,cAEd,CAACd,IAEJ,IAAMe,EAAQC,uBAAY,WACxBf,EAAU,OACVE,GAAQ,KACP,IAEGc,EAAOD,uBAAY,WACvBf,EAAU,QACVF,EAAO,GACPI,GAAQ,KACP,IAEGe,EAAQF,uBAAY,WACxBjB,EAAO,KACN,IAEGoB,EAAOH,uBAAY,WACvBf,EAAU,QACVE,GAAQ,KACP,IAGH,OADAiB,QAAQC,IAAI,IAAIC,KAAKxB,IAEnB,cAACyB,EAAA,EAAD,CAAWC,UAAWpB,EAAQjB,SAAUsC,SAAS,KAAjD,SACE,cAACC,EAAA,EAAD,CAAM/C,WAAS,EAACgD,QAAQ,SAAxB,SACE,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAtC,SACE,eAACC,EAAA,EAAD,CAAMT,UAAWpB,EAAQhB,KAAzB,UACE,cAAC8C,EAAA,EAAD,CAAaV,UAAWpB,EAAQV,YAAhC,SACE,cAACyC,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACG,IAAId,KAAKxB,GAAKuC,cAAcC,MAAM,GAAI,QAG3C,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAaC,MAAM,SAASL,QAAQ,YAAYM,MAAM,UAAtD,UACIxC,EAGA,cAACyC,EAAA,EAAD,CAAQC,QAAS3B,EAAjB,kBAFA,cAAC0B,EAAA,EAAD,CAAQC,QAAS7B,EAAjB,mBAIF,cAAC4B,EAAA,EAAD,CAAQC,QAAS1B,EAAjB,mBACA,cAACyB,EAAA,EAAD,CAAQC,QAASzB,EAAjB,gCCvEhB0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACnD,EAAD,MAEFoD,SAASC,eAAe,W","file":"static/js/main.59763832.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n    listStyleType: 'none',\n  },\n  cardGrid: {\n    padding: '20px 0',\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column',\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n}));\n\nexport default useStyles;\n","import { interval } from 'rxjs';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport {\n  Button,\n  ButtonGroup,\n  Card,\n  CardActions,\n  CardContent,\n  Container,\n  Grid,\n  Typography,\n} from '@material-ui/core';\nimport useStyles from './style.js';\n\nexport default function App() {\n  const [sec, setSec] = useState(0);\n  const [status, setStatus] = useState('stop');\n  const [isOn, setIsOn] = useState(false);\n  const classes = useStyles();\n\n  useEffect(() => {\n    const unsubscribe$ = new Subject();\n    interval(1000)\n      .pipe(takeUntil(unsubscribe$))\n      .subscribe(() => {\n        if (status === 'run') {\n          setSec(val => val + 1000);\n        }\n      });\n    return () => {\n      unsubscribe$.next();\n      unsubscribe$.complete();\n    };\n  }, [status]);\n\n  const start = useCallback(() => {\n    setStatus('run');\n    setIsOn(true);\n  }, []);\n\n  const stop = useCallback(() => {\n    setStatus('stop');\n    setSec(0);\n    setIsOn(false);\n  }, []);\n\n  const reset = useCallback(() => {\n    setSec(0);\n  }, []);\n\n  const wait = useCallback(() => {\n    setStatus('wait');\n    setIsOn(false);\n  }, []);\n\n  console.log(new Date(sec));\n  return (\n    <Container className={classes.cardGrid} maxWidth=\"lg\">\n      <Grid container justify=\"center\">\n        <Grid item xs={12} sm={12} md={8} lg={6}>\n          <Card className={classes.card}>\n            <CardContent className={classes.cardContent}>\n              <Typography variant=\"h1\">\n                {new Date(sec).toISOString().slice(11, 19)}\n              </Typography>\n            </CardContent>\n            <CardActions>\n              <ButtonGroup align=\"center\" variant=\"contained\" color=\"primary\">\n                {!isOn ? (\n                  <Button onClick={start}>Start</Button>\n                ) : (\n                  <Button onClick={stop}>Stop</Button>\n                )}\n                <Button onClick={reset}>Reset</Button>\n                <Button onClick={wait}>Wait</Button>\n              </ButtonGroup>\n            </CardActions>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}